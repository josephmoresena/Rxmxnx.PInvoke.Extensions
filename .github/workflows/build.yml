name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x
      - name: Setup Tree pre-requisites
        run: sudo apt-get install tree unzip --assume-yes
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner 
      - name: Build and analyze Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"josephmoresena_PInvoke.Extensions" /o:"josephmoresena" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.scanner.scanAll=false /d:sonar.coverage.exclusions="**Test.cs,**Tests.cs,**test.cs,**tests.cs,**.SourceGenerator/*.cs" /d:sonar.cs.vstest.reportsPaths=TestResults/*.trx /d:sonar.cs.opencover.reportsPaths=TestResults/*/coverage.opencover.xml /d:sonar.cpd.exclusions="**/NativeUtilities/**FixedAction.cs,**/NativeUtilities/**FixedFunc.cs,**/IManagedBinaryBuffer/StaticCompose.cs,**Test/**Tests**/**.cs,**/Localization/**MessageResource.cs"
          dotnet restore src 
          dotnet build src --configuration release 
          dotnet test src --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults/  --logger "trx;verbosity=detailed" --no-build --no-restore --configuration release -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover 
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Pack assembly
        working-directory: ./package
        run: |
          dotnet pack -c Release /p:Version=9999.99.99.99-tmp /p:NoIntermediateBuild=true
          for package in bin/Release/Rxmxnx.PInvoke.Extensions*.*nupkg; do
            echo "-----------------------------------"
            TEMP_DIR=$(mktemp -d)
            unzip -q "$package" -d "$TEMP_DIR"
            ls -sh "$package"
            tree "$TEMP_DIR" -h --noreport | tail -n +2 | sed "s|$TEMP_DIR/||"
            rm -rf "$TEMP_DIR"
          done
          echo "-----------------------------------"
      - name: Build Application Test
        working-directory: ./src/ApplicationTest/Rxmxnx.PInvoke.ApplicationTest
        shell: pwsh
        run: |
          if ($IsWindows) {
           $CopyTargetTo= ".\..\..\..\executable"
          } else {
           $CopyTargetTo= "./../../../executable"
          }
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=false /p:IlcDisableReflection=false /p:CreateLogs=true
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=false /p:IlcDisableReflection=true /p:CreateLogs=true
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=true /p:IlcDisableReflection=false /p:CreateLogs=true
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=true /p:IlcDisableReflection=true /p:CreateLogs=true
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=false /p:IlcDisableReflection=false /p:CreateLogs=true
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=false /p:IlcDisableReflection=true /p:CreateLogs=true
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=true /p:IlcDisableReflection=false /p:CreateLogs=true
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=true /p:IlcDisableReflection=true /p:CreateLogs=true
      - name: Run Application Test
        working-directory: ./executable
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path . -File
          foreach ($file in $files) {
            Write-Host "====================================="
            Write-Host "$($file.FullName)"
            Write-Host "====================================="

            & $file.FullName
          }
      - name: Upload Package-Trimmed-Executables-Logs
        uses: actions/upload-artifact@v4
        with:
          name: Package-Trimmed-Executables-Logs
          path: ./executable/ilcLogs
  run-tests:
    needs: [ build ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        if: runner.os != 'Windows'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Install WinGet
        if: runner.os == 'Windows'
        uses: Cyberboss/install-winget@v1
      - name: Setup .NET x86
        if: runner.os == 'Windows'
        run: |
          winget install Microsoft.DotNet.SDK.9 --architecture x86 --silent --disable-interactivity --accept-source-agreements
      - name: Setup .NET x64
        if: runner.os == 'Windows'
        run: |
          winget install Microsoft.DotNet.SDK.9 --architecture x64 --silent --force --disable-interactivity --accept-source-agreements
      - name: Build tests
        run: |
          dotnet restore src 
          dotnet build src --configuration Release 
      - name: Windows x86 tests
        if: runner.os == 'Windows'
        run: |
          dotnet test src --no-build --no-restore --configuration Release  --logger "console;verbosity=detailed" --settings src\Test\x86.runsettings
      - name: Run tests
        run: |
          dotnet test src --no-build --no-restore --configuration Release  --logger "console;verbosity=detailed"
      - name: Pack assembly
        working-directory: ./package
        run: dotnet pack -c Release /p:Version=9999.99.99.99-tmp /p:NoIntermediateBuild=true
      - name: Build Application Test
        working-directory: ./src/ApplicationTest/Rxmxnx.PInvoke.ApplicationTest
        shell: pwsh
        run: |
          if ($IsWindows) {
           $CopyTargetTo= ".\..\..\..\executable"
          } else {
           $CopyTargetTo= "./../../../executable"
          }
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=false /p:IlcDisableReflection=false /p:CreateLogs=false
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=false /p:IlcDisableReflection=true /p:CreateLogs=false
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=true /p:IlcDisableReflection=false /p:CreateLogs=false
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=true /p:IlcDisableReflection=true /p:CreateLogs=false
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=false /p:IlcDisableReflection=false /p:CreateLogs=false
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=false /p:IlcDisableReflection=true /p:CreateLogs=false
          dotnet publish /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=true /p:IlcDisableReflection=true /p:CreateLogs=false
      - name: Build Application Test (x86)
        if: runner.os == 'Windows'
        working-directory: ./src/ApplicationTest/Rxmxnx.PInvoke.ApplicationTest
        shell: pwsh
        run: |
          $CopyTargetTo= ".\..\..\..\executable"
          dotnet publish -r win-x86 /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=false /p:IlcDisableReflection=false /p:CreateLogs=false
          dotnet publish -r win-x86 /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=false /p:IlcDisableReflection=true /p:CreateLogs=false
          dotnet publish -r win-x86 /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=true /p:IlcDisableReflection=false /p:CreateLogs=false
          dotnet publish -r win-x86 /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=true /p:IlcDisableReflection=true /p:CreateLogs=false
          dotnet publish -r win-x86 /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=false /p:IlcDisableReflection=false /p:CreateLogs=false
          dotnet publish -r win-x86 /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=false /p:IlcDisableReflection=true /p:CreateLogs=false
          dotnet publish -r win-x86 /p:CopyTargetTo=$CopyTargetTo /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=true /p:IlcDisableReflection=true /p:CreateLogs=false
      - name: Run Application Test
        working-directory: ./executable
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path . -File
          foreach ($file in $files) {
            Write-Host "====================================="
            Write-Host "$($file.FullName)"
            Write-Host "====================================="
          
            & $file.FullName
        }