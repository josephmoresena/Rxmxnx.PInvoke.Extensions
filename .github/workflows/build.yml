name: Build
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x
      - name: Setup Tree pre-requisites
        run: sudo apt-get install tree unzip --assume-yes
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path ./.sonar/scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner 
      - name: Build and analyze Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: pwsh
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"josephmoresena_PInvoke.Extensions" /o:"josephmoresena" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.scanner.scanAll=false /d:sonar.coverage.exclusions="**Test.cs,**Tests.cs,**test.cs,**tests.cs,**.SourceGenerator/*.cs" /d:sonar.cs.vstest.reportsPaths=TestResults/*.trx /d:sonar.cs.opencover.reportsPaths=TestResults/*/coverage.opencover.xml /d:sonar.cpd.exclusions="**/NativeUtilities/**FixedAction.cs,**/NativeUtilities/**FixedFunc.cs,**/IManagedBinaryBuffer/StaticCompose.cs,**Test/**Tests**/**.cs,**/Localization/**MessageResource.cs"
          dotnet restore src 
          dotnet build src --configuration release 
          dotnet test src --verbosity normal --collect:"XPlat Code Coverage" --results-directory TestResults/  --logger "trx;verbosity=detailed" --no-build --no-restore --configuration release -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover 
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Pack assembly
        working-directory: ./package/Rxmxnx.PInvoke.Extensions
        run: |
          dotnet pack -c Release /p:Version=9999.99.99.99-tmp /p:NoIntermediateBuild=true
          for package in bin/Release/Rxmxnx.PInvoke.Extensions*.*nupkg; do
            echo "-----------------------------------"
            TEMP_DIR=$(mktemp -d)
            unzip -q "$package" -d "$TEMP_DIR"
            ls -sh "$package"
            tree "$TEMP_DIR" -h --noreport | tail -n +2 | sed "s|$TEMP_DIR/||"
            rm -rf "$TEMP_DIR"
          done
          echo "-----------------------------------"
      - name: Create tmpProject
        run: mkdir tmpProject
      - name: Create PackageTrimmedAssembly.csproj
        working-directory: ./tmpProject
        run: |
          echo '<Project>' > Directory.Build.props
          echo '  <ItemGroup>' >> Directory.Build.props
          echo '    <RuntimeHostConfigurationOption Condition="'"'"'$(DisableBufferAutoComposition)'"'"' == '"'"'true'"'"'" Include="PInvoke.DisableBufferAutoComposition" Value="true" Trim="true" />' >> Directory.Build.props
          echo '  </ItemGroup>' >> Directory.Build.props
          echo '</Project>' >> Directory.Build.props  
          dotnet new console --name PackageTrimmedAssembly --aot true
      - name: Create PackageTrimmedAssembly NuGet.config
        working-directory: ./tmpProject/PackageTrimmedAssembly
        run: |
          dotnet new nugetconfig
          dotnet nuget add source ../../package/Rxmxnx.PInvoke.Extensions/bin/Release/ -n TmpSource
          dotnet add package Rxmxnx.PInvoke.Extensions --version 9999.99.99.99-tmp
      - name: Create PackageTrimmedAssembly Program.cs
        working-directory: ./tmpProject/PackageTrimmedAssembly
        run: |
          echo 'using System.Globalization; using System.Runtime.CompilerServices; using Rxmxnx.PInvoke; using Rxmxnx.PInvoke.Buffers;
          Console.WriteLine($"Native AOT: {AotInfo.IsNativeAot}");
          Console.WriteLine($"Reflection Enabled: {(!AotInfo.IsReflectionDisabled)}");
          Console.WriteLine($"Is 64-bit: {(NativeUtilities.PointerSize == 8)}");
          Console.WriteLine($"Globalization-Invariant Mode: {NativeUtilities.GlobalizationInvariantModeEnabled}");
          Console.WriteLine($"UI Culture: {CultureInfo.CurrentUICulture.TwoLetterISOLanguageName}");
          Console.WriteLine($"UI Iso639-1: {NativeUtilities.UserInterfaceIso639P1}");
          Console.WriteLine($"Buffer AutoComposition Enabled: {BufferManager.BufferAutoCompositionEnabled}");
          var bufferMetadata =
              (new Composite<Atomic<ValueTuple<String, Int32>>,
                  Composite<Atomic<ValueTuple<String, Int32>>, Atomic<ValueTuple<String, Int32>>, ValueTuple<String, Int32>>,
                  ValueTuple<String, Int32>>() as IManagedBinaryBuffer<ValueTuple<String, Int32>>).Metadata;
          Console.WriteLine($"Metadata Size: {bufferMetadata.Size}");
          BufferManager.Alloc<ValueTuple<String, Int32>>(bufferMetadata.Size, s =>
          {
              Console.WriteLine($"Span Size: {s.Span.Length}");
              Console.WriteLine($"Buffer Size: {s.FullLength}");
              Console.WriteLine($"In Stack: {s.InStack}");
              Span<ValueTuple<String, Int32>> localSpan = s.Span;
              ref Span<ValueTuple<String, Int32>> refSpan = ref localSpan;
              ValPtr<Span<ValueTuple<String, Int32>>> valRefSpan = NativeUtilities.GetUnsafeValPtrFromRef(ref localSpan);
              NativeUtilities.WithSafeFixed(ref refSpan, UseFixedRefSpan);
              Console.WriteLine($"Ref Span: 0x{valRefSpan.Pointer:x8}");
              Console.WriteLine($"Ref Span vs Ptr Span: {Unsafe.AreSame(ref refSpan, ref valRefSpan.Reference)}");
          });
          
          return;
          
          static void UseFixedRefSpan(in IFixedReference<Span<ValueTuple<String, Int32>>> frs) {
              Console.WriteLine($"Reference Length: {frs.Reference.Length}");
          }' > Program.cs
      - name: Build Package-Trimmed-Executables (PackageTrimmedAssembly)
        working-directory: ./tmpProject/PackageTrimmedAssembly
        run: |
          dotnet publish /p:TrimMode=full /p:PublishTrimmed=true /p:PublishDir=./../Executable/debugSymbols /p:IntermediateOutputPath=./../Executable/obj/ \
            /p:TrimmerSingleWarn=false /p:SuppressTrimAnalysisWarnings=false /p:IlcGenerateMetadataLog=true /p:IlcGenerateMstatFile=true /p:IlcGenerateDgmlFile=true \
            /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=false /p:IlcDisableReflection=false \
            /p:AssemblyName=AutoComposition.Globalization.Reflection
          mv ./../Executable/debugSymbols/AutoComposition.Globalization.Reflection ./../Executable/AutoComposition.Globalization.Reflection
          dotnet publish /p:TrimMode=full /p:PublishTrimmed=true /p:PublishDir=./../Executable/debugSymbols /p:IntermediateOutputPath=./../Executable/obj/ \
            /p:TrimmerSingleWarn=false /p:SuppressTrimAnalysisWarnings=false /p:IlcGenerateMetadataLog=true /p:IlcGenerateMstatFile=true /p:IlcGenerateDgmlFile=true \
            /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=false /p:IlcDisableReflection=false \
            /p:AssemblyName=Globalization.Reflection
          mv ./../Executable/debugSymbols/Globalization.Reflection ./../Executable/Globalization.Reflection
          dotnet publish /p:TrimMode=full /p:PublishTrimmed=true /p:PublishDir=./../Executable/debugSymbols /p:IntermediateOutputPath=./../Executable/obj/ \
            /p:TrimmerSingleWarn=false /p:SuppressTrimAnalysisWarnings=false /p:IlcGenerateMetadataLog=true /p:IlcGenerateMstatFile=true /p:IlcGenerateDgmlFile=true \
            /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=true /p:IlcDisableReflection=false \
            /p:AssemblyName=AutoComposition.Reflection
          mv ./../Executable/debugSymbols/AutoComposition.Reflection ./../Executable/AutoComposition.Reflection
          dotnet publish /p:TrimMode=full /p:PublishTrimmed=true /p:PublishDir=./../Executable/debugSymbols /p:IntermediateOutputPath=./../Executable/obj/ \
            /p:TrimmerSingleWarn=false /p:SuppressTrimAnalysisWarnings=false /p:IlcGenerateMetadataLog=true /p:IlcGenerateMstatFile=true /p:IlcGenerateDgmlFile=true \
            /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=false /p:IlcDisableReflection=true \
            /p:AssemblyName=AutoComposition.Globalization
          mv ./../Executable/debugSymbols/AutoComposition.Globalization ./../Executable/AutoComposition.Globalization
          dotnet publish /p:TrimMode=full /p:PublishTrimmed=true /p:PublishDir=./../Executable/debugSymbols /p:IntermediateOutputPath=./../Executable/obj/ \
            /p:TrimmerSingleWarn=false /p:SuppressTrimAnalysisWarnings=false /p:IlcGenerateMetadataLog=true /p:IlcGenerateMstatFile=true /p:IlcGenerateDgmlFile=true \
            /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=true /p:IlcDisableReflection=false \
            /p:AssemblyName=Reflection
          mv ./../Executable/debugSymbols/Reflection ./../Executable/Reflection
          dotnet publish /p:TrimMode=full /p:PublishTrimmed=true /p:PublishDir=./../Executable/debugSymbols /p:IntermediateOutputPath=./../Executable/obj/ \
            /p:TrimmerSingleWarn=false /p:SuppressTrimAnalysisWarnings=false /p:IlcGenerateMetadataLog=true /p:IlcGenerateMstatFile=true /p:IlcGenerateDgmlFile=true \
            /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=false /p:IlcDisableReflection=true \
            /p:AssemblyName=Globalization
          mv ./../Executable/debugSymbols/Globalization ./../Executable/Globalization
          dotnet publish /p:TrimMode=full /p:PublishTrimmed=true /p:PublishDir=./../Executable/debugSymbols /p:IntermediateOutputPath=./../Executable/obj/ \
            /p:TrimmerSingleWarn=false /p:SuppressTrimAnalysisWarnings=false /p:IlcGenerateMetadataLog=true /p:IlcGenerateMstatFile=true /p:IlcGenerateDgmlFile=true \
            /p:DisableBufferAutoComposition=false /p:InvariantGlobalization=true /p:IlcDisableReflection=true \
            /p:AssemblyName=AutoComposition
          mv ./../Executable/debugSymbols/AutoComposition ./../Executable/AutoComposition
          dotnet publish /p:TrimMode=full /p:PublishTrimmed=true /p:PublishDir=./../Executable/debugSymbols /p:IntermediateOutputPath=./../Executable/obj/ \
            /p:TrimmerSingleWarn=false /p:SuppressTrimAnalysisWarnings=false /p:IlcGenerateMetadataLog=true /p:IlcGenerateMstatFile=true /p:IlcGenerateDgmlFile=true \
            /p:DisableBufferAutoComposition=true /p:InvariantGlobalization=true /p:IlcDisableReflection=true \
            /p:AssemblyName=None
          mv ./../Executable/debugSymbols/None ./../Executable/None
          
          mv ./../Executable/obj/native ./../Executable/ilcLogs
          rm ./../Executable/ilcLogs/*.o
          rm ./../Executable/ilcLogs/*.ilc.rsp
          rm ./../Executable/ilcLogs/*.exports
          rm -rf ./../Executable/obj
          rm -rf ./../Executable/debugSymbols
          rm -rf ./bin
          rm -rf ./obj
      - name: Run Package-Trimmed-Executables
        working-directory: ./tmpProject/Executable
        run: |
          echo '----- AutoComposition + Globalization + Reflection -----'
          ./AutoComposition.Globalization.Reflection
          echo '----- Globalization + Reflection -----'
          ./Globalization.Reflection
          echo '----- AutoComposition + Reflection -----'
          ./AutoComposition.Reflection
          echo '----- AutoComposition + Globalization -----'
          ./AutoComposition.Globalization
          echo '----- Reflection -----'
          ./Reflection
          echo '----- Globalization -----'
          ./Globalization
          echo '----- AutoComposition -----'
          ./AutoComposition
          echo '----- None -----'
          ./None
      - name: Upload Package-Trimmed-Executables-Logs
        uses: actions/upload-artifact@v4
        with:
          name: Package-Trimmed-Executables-Logs
          path: ./tmpProject/Executable/ilcLogs
  run-tests:
    needs: [ build ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest, macos-13 ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        if: runner.os != 'Windows'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Install WinGet
        if: runner.os == 'Windows'
        uses: Cyberboss/install-winget@v1
      - name: Setup .NET x86
        if: runner.os == 'Windows'
        run: |
          winget install Microsoft.DotNet.SDK.9 --architecture x86 --silent --disable-interactivity --accept-source-agreements
      - name: Setup .NET x64
        if: runner.os == 'Windows'
        run: |
          winget install Microsoft.DotNet.SDK.9 --architecture x64 --silent --force --disable-interactivity --accept-source-agreements
      - name: Build tests
        run: |
          dotnet restore src 
          dotnet build src --configuration Release 
      - name: Windows x86 tests
        if: runner.os == 'Windows'
        run: |
          dotnet test src --no-build --no-restore --configuration Release  --logger "console;verbosity=detailed" --settings src\Test\x86.runsettings
      - name: Run tests
        run: |
          dotnet test src --no-build --no-restore --configuration Release  --logger "console;verbosity=detailed"